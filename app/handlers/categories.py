from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from sqlalchemy.ext.asyncio import AsyncSession
from app.database.models import Category
from app.handlers.states import CategoryState

import app.database.orm_query as qr
import app.keyboards.keyboard as kb

router = Router()

@router.message(F.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def add_category(message: Message, state: FSMContext, session: AsyncSession):
    user = await qr.orm_get_user_by_tg_id(session, message.from_user.id)
    if not user:
        return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
    
    await state.update_data(user_id=user.id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(CategoryState.waiting_for_name)

@router.message(F.text == 'üóëÔ∏è–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def delete_category(message: Message, state: FSMContext, session: AsyncSession):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup= 
                                                                await kb.categories(session, 'delete'))

@router.message(F.text == '‚ôªÔ∏è–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def delete_category(message: Message, state: FSMContext, session: AsyncSession):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', reply_markup= 
                                                                await kb.deleted_categories(session, 'restore'))

@router.message(F.text == '‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def delete_category(message: Message, state: FSMContext, session: AsyncSession):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup= 
                                                                await kb.categories(session, 'update'))
    
@router.message(F.text == 'üìÅ–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
async def get_category_list(message: Message, state: FSMContext, session: AsyncSession):
    all_categories = await qr.orm_get_categories(session)
    active_categories = [category for category in all_categories if not category.is_deleted]

    if not active_categories:
        return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."

    categories_text = "\n".join([category.name for category in active_categories])
    await message.answer("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    await message.answer(categories_text)


@router.message(CategoryState.waiting_for_name)
async def receive_category_name(message: Message, state: FSMContext, session: AsyncSession):
    state_data = await state.get_data()
    category_name = message.text.strip()

    if not category_name:
        return await message.answer("‚ùå –ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

    await qr.orm_add_category(session, user_id=state_data['user_id'], name=category_name)
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

@router.message(CategoryState.waiting_for_update)
async def receive_category_update(message: Message, state: FSMContext, session: AsyncSession):
    state_data = await state.get_data()
    new_name = message.text.strip()

    if not new_name:
        return await message.answer("‚ùå –ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

    category_id = state_data.get("category_id")
    if not category_id:
        return await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")

    category = await session.get(Category, category_id)
    if not category:
        return await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    old_name = category.name
    await qr.orm_update_category(session, category_id, category_name=new_name)

    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è \"{old_name}\" —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ \"{new_name}\"!")
    await state.clear()

@router.message(F.text.lower().in_(["–¥–∞", "–Ω–µ—Ç"]), CategoryState.waiting_for_confirmation)
async def confirm_category_action(message: Message, state: FSMContext, session: AsyncSession):
    user_input = message.text.lower()
    data = await state.get_data()

    if user_input == "–¥–∞":
        action = data["action"]
        category_id = data["category_id"]

        if action == "delete":
            await qr.orm_delete_category(session, category_id)
            await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")
        elif action == "restore":
            await qr.orm_restore_category(session, category_id)
            await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    else:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    await state.clear()