from datetime import timedelta
from decimal import Decimal
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import Currency, Setting
from app.handlers.states import LimitState, TransactionState, CategoryState

import app.database.orm_query as qr
import app.keyboards.keyboard as kb

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message, session: AsyncSession):
    existing_user = await qr.orm_get_user_by_tg_id(session, message.from_user.id)

    if existing_user:
        await message.answer(
            "üëã –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –û—Ç–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=await kb.main_menu()
        )
        return

    user_id = await qr.set_user(session, message.from_user.id, message.from_user.username)
    await qr.orm_add_default_currencies(session)
    await qr.orm_add_default_categories(session, user_id)
    await qr.orm_add_default_settings(session, user_id)
    await session.commit()

    await message.answer("‚úÖ –í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", reply_markup=await kb.main_menu())

@router.message(F.text == 'üìâ–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç')
async def get_categories(message: Message, session: AsyncSession):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç:', reply_markup= await kb.categories(session, 'setlimit'))

@router.message(F.text == 'üí∏–ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É/–¥–æ—Ö–æ–¥')
async def make_transaction(message: Message, session: AsyncSession):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup= await kb.categories(session, 'add'))

@router.message(F.text == 'üßæ–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
async def view_category_expenses(message: Message, session: AsyncSession):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup= await kb.categories(session, 'view'))
    
@router.callback_query(F.data.startswith('category_'))
async def handle_category_action(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
   action = callback.data.split("_")[1]
   category_id = int(callback.data.split("_")[2])
   category = await qr.orm_get_category_by_id(session, category_id)
   
   if action == "add":
    await state.update_data(category_id = category_id)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')
    await state.set_state(TransactionState.waiting_for_amount)

   elif action == "view":
    user = await qr.orm_get_user_by_tg_id(session, callback.from_user.id)
    limit = await qr.orm_get_category_limit(session, user.id, category_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_currency_id_result = await session.execute(
        select(Setting.currency_id).where(Setting.user_id == user.id)
    )
    user_currency_id = user_currency_id_result.scalar_one_or_none()

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    currencies_result = await session.execute(select(Currency))
    currencies_list = list(currencies_result.scalars())
    currency_map = {
        currency.id: currency.symbol or currency.code
        for currency in currencies_list
    }
    currency_rates = {
        currency.id: currency.rate_to_base
        for currency in currencies_list
    }

    user_rate = currency_rates.get(user_currency_id)
    limit_rate = currency_rates.get(limit.currency_id) if limit else None

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞—Ç—ã
    total, totals_by_currency = await qr.orm_get_total_amount_by_category(session, user.id, category_id)
    transactions = await qr.orm_get_last_transactions(session, user.id, category_id, limit=5)

    text = f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category.name}\n"

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    if limit and user_rate and limit_rate:
        total_in_limit_currency = total * (user_rate / limit_rate)
        percent_used = (Decimal(total_in_limit_currency) / limit.limit_amount * 100) if limit.limit_amount > 0 else 0
        limit_currency_symbol = currency_map.get(limit.currency_id, "‚ÇΩ")
        text += (
            f"<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç:</b> {limit.limit_amount:.2f}{limit_currency_symbol}\n"
            f"<b>–ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ:</b> {total_in_limit_currency:.2f}{limit_currency_symbol} ({percent_used:.1f}%)\n"
        )
    else:
        text += "<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç:</b> –ù–∞ –¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç\n"

    # –†–∞—Å—Ö–æ–¥—ã –ø–æ –≤–∞–ª—é—Ç–∞–º
    if len(totals_by_currency) > 1:
        text += "<b>–†–∞—Å—Ö–æ–¥—ã –ø–æ –≤–∞–ª—é—Ç–∞–º:</b>\n"
        for currency_id, amount in totals_by_currency.items():
            sym = currency_map.get(currency_id, "")
            text += f"  ‚Ä¢ {amount:.2f}{sym}\n"

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if transactions:
        text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"
        for tx in transactions:
            icon = "üîª" if tx.is_expense else "üü¢"
            local_time = tx.created + timedelta(hours=7)
            date = local_time.strftime('%d-%m-%Y %H:%M')
            comment = f" - {tx.comment}" if tx.comment else ""
            sign = "-" if tx.is_expense else "+"
            tx_currency_symbol = currency_map.get(tx.currency_id, "‚ÇΩ")
            text += f"{icon} {sign}{tx.amount:.2f}{tx_currency_symbol} ({date}){comment}\n"
    else:
        text += "–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."

    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()
   
   elif action == "setlimit":
       await state.update_data(category_id = category_id)
       await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')
       await state.set_state(LimitState.waiting_for_amount)
    
   elif action == "delete":
       await state.update_data(category_id = category_id, action='delete')
       await callback.message.answer(f'‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category.name}?')
       await state.set_state(CategoryState.waiting_for_confirmation)
    
   elif action == "restore":
       await state.update_data(category_id = category_id, action = 'restore')
       await callback.message.answer(f'‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category.name}?')
       await state.set_state(CategoryState.waiting_for_confirmation)

   elif action == "update":
       await state.update_data(category_id = category_id)
       await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è {category.name}')
       await state.set_state(CategoryState.waiting_for_update)

@router.message(TransactionState.waiting_for_amount)
async def enter_amount(message: Message, state: FSMContext):
    text = message.text.strip()
    is_expense = True
   
    if text.startswith('+'):
        is_expense = False
        text = text[1:]

    try:
        amount = float(text.replace(',', '.'))
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")

    await state.update_data(amount=amount, is_expense=is_expense)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. (–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ '-'):")
    await state.set_state(TransactionState.waiting_for_comment)

@router.message(TransactionState.waiting_for_comment)
async def enter_comment(message: Message, state: FSMContext, session: AsyncSession):
    state_data = await state.get_data()
    comment = message.text if message.text != '-' else ''

    user = await qr.orm_get_user_by_tg_id(session, message.from_user.id)
    if not user:
        return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
    
    user_currency = await qr.orm_get_user_currency(session, user.id)
    if not user_currency:
        return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    data = {
        "user_id": user.id,
        "category_id": state_data["category_id"],
        "amount": state_data["amount"],
        "is_expense": state_data["is_expense"],
        "comment": comment,
        "currency_id": user_currency.id 
    }

    await qr.orm_make_transaction(session, data)

    exceeded, percent = await qr.check_limit(session, user_id=user.id, category_id=state_data["category_id"])

    if exceeded:
        await message.answer(
            f"‚ùóÔ∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {percent:.1f}% –æ—Ç –ª–∏–º–∏—Ç–∞."
        )
    elif percent is not None and percent >= 80:
        await message.answer(
            f"‚ö†Ô∏è –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {percent:.1f}% –ª–∏–º–∏—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"
            f"–û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏!"
        )

    await message.answer('–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã')
    await state.clear()
