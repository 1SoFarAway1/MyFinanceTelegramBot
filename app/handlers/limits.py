import re
from datetime import datetime, timezone
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from sqlalchemy.ext.asyncio import AsyncSession
from app.handlers.states import LimitState


from app.utils.constants import PERIODS

import app.database.orm_query as qr
import app.keyboards.keyboard as kb

router = Router()

@router.message(LimitState.waiting_for_amount)
async def enter_limit(message: Message, state: FSMContext, session: AsyncSession):
    try:
        limit_amount = float(message.text.replace(',','.'))
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    await state.update_data(limit_amount = limit_amount)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç')
    await state.set_state(LimitState.waiting_for_period)

@router.message(LimitState.waiting_for_period)
async def enter_limit_period(message: Message, state: FSMContext, session: AsyncSession):
    user_input = message.text.strip().lower()
    user = await qr.orm_get_user_by_tg_id(session, message.from_user.id)
    state_data = await state.get_data()

    if user_input in PERIODS:
        period = PERIODS[user_input]
    elif re.fullmatch(r"\d{1,3}d", user_input):
        period = user_input
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞.\n–í–≤–µ–¥–∏—Ç–µ:\n‚Ä¢ —á–∏—Å–ª–æ —Å 'd' –Ω–∞ –∫–æ–Ω—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30d)\n‚Ä¢ –∏–ª–∏ –æ–¥–Ω–æ –∏–∑ —Å–ª–æ–≤: day, week, month, year"
        )
        return

    await state.update_data(period=period)

    await message.answer("üîÅ –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ–±—ã –ª–∏–º–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(LimitState.waiting_for_confirmation)

@router.message(LimitState.waiting_for_confirmation)
async def confirm_limit_updating(message: Message, session: AsyncSession, state: FSMContext):
    user_response = message.text.strip().lower()
    is_updating = None

    if user_response in ("–¥–∞", "yes", "y"):
        is_updating = True
    elif user_response in ("–Ω–µ—Ç", "no", "n"):
        is_updating = False
    else:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
        return

    state_data = await state.get_data()
    user = await qr.orm_get_user_by_tg_id(session, message.from_user.id)
    user_currency = await qr.orm_get_user_currency(session, user.id)

    data = {
        "user_id": user.id,
        "category_id": state_data["category_id"],
        "limit_amount": state_data["limit_amount"],
        "period": state_data["period"],
        "is_updating": is_updating,
        "currency_id": user_currency.id,
        "start_date": datetime.now(timezone.utc),
    }

    await qr.orm_set_category_limit(session, data)

    updating_text = "—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º" if is_updating else "–±–µ–∑ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    await message.answer(f"‚úÖ –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {data['limit_amount']}{user_currency.symbol} –Ω–∞ –ø–µ—Ä–∏–æ–¥: {data['period']} ({updating_text})")

    await state.clear()