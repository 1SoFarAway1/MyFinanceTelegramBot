from collections import defaultdict
import datetime
from decimal import Decimal
import io
from matplotlib.dates import relativedelta
import matplotlib.pyplot as plt

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import Currency, Setting
import app.database.orm_query as qr

router = Router()

@router.message(F.text == 'üí∏–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã')
async def all_expenses(message: Message, session: AsyncSession):
    user = await qr.orm_get_user_by_tg_id(session, message.from_user.id)
    expenses = await qr.orm_all_expenses(session, user.id)

    if not expenses:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞—Ç.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_currency = await qr.orm_get_user_currency(session, user.id)
    currency_symbol = user_currency.symbol or user_currency.code

    text = f"–í–∞—à–∏ —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ {currency_symbol}:\n\n"
    for name, total in expenses:
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ total –∫ Decimal –µ—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ
        total = Decimal(total)
        text += f"‚Ä¢ {name}: {total:.2f}{currency_symbol}\n"

    await message.answer(text)

@router.message(F.text == 'üí∞–í—Å–µ –¥–æ—Ö–æ–¥—ã')
async def all_expenses(message: Message, session: AsyncSession):
    user = await qr.orm_get_user_by_tg_id(session, message.from_user.id)
    expenses = await qr.orm_all_income(session, user.id)

    if not expenses:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤.")
        return

    text = "–í–∞—à–∏ –¥–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
    for name, total in expenses:
        text += f"‚Ä¢ {name}: {total:.2f}\n"

    await message.answer(text)

@router.message(F.text == 'üìâ–î–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤')
async def expense_pie_chart(message: Message, session: AsyncSession):
    user = await qr.orm_get_user_by_tg_id(session, message.from_user.id)
    data = await qr.orm_get_monthly_expenses_by_category(session, user.id)
    await message.answer('–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...')

    if not data:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.")
        return

    labels, values = zip(*data)
    total = sum(values)

    filtered_labels = []
    filtered_values = []
    others_total = 0

    for label, value in zip(labels, values):
        percent = value / total
        if percent < 0.01:
            others_total += value
        else:
            filtered_labels.append(label)
            filtered_values.append(value)

    if others_total > 0:
        filtered_labels.append("–ü—Ä–æ—á–µ–µ")
        filtered_values.append(others_total)

    fig, ax = plt.subplots(figsize=(6, 6))
    wedges, texts, autotexts = ax.pie(
        filtered_values,
        autopct=lambda pct: f'{pct:.1f}%' if pct >= 1 else '',
        startangle=90,
        pctdistance=0.7
    )

    for text in texts:
        text.set_text("")

    ax.legend(wedges, filtered_labels, title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", loc="center left", bbox_to_anchor=(1, 0.5))
    ax.set_title("–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", fontsize=12)
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)

    photo = BufferedInputFile(buf.read(), filename="chart.png")
    await message.answer_photo(photo, caption="–î–∏–∞–≥—Ä–∞–º–º–∞ —Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")

@router.message(F.text == 'üìà–î–æ–ª—è –¥–æ—Ö–æ–¥–æ–≤')
async def income_pie_chart(message: Message, session: AsyncSession):
    user = await qr.orm_get_user_by_tg_id(session, message.from_user.id)
    data = await qr.orm_get_monthly_income_by_category(session, user.id)
    await message.answer('–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...')

    if not data:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.")
        return

    labels, values = zip(*data)
    total = sum(values)

    filtered_labels = []
    filtered_values = []
    others_total = 0

    for label, value in zip(labels, values):
        percent = value / total
        if percent < 0.01:
            others_total += value
        else:
            filtered_labels.append(label)
            filtered_values.append(value)

    if others_total > 0:
        filtered_labels.append("–ü—Ä–æ—á–µ–µ")
        filtered_values.append(others_total)

    fig, ax = plt.subplots(figsize=(6, 6))
    wedges, texts, autotexts = ax.pie(
        filtered_values,
        autopct=lambda pct: f'{pct:.1f}%' if pct >= 1 else '',
        startangle=90,
        pctdistance=0.7
    )

    for text in texts:
        text.set_text("")

    ax.legend(wedges, filtered_labels, title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", loc="center left", bbox_to_anchor=(1, 0.5))
    ax.set_title("–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", fontsize=12)
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)

    photo = BufferedInputFile(buf.read(), filename="chart.png")
    await message.answer_photo(photo, caption="–î–∏–∞–≥—Ä–∞–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")

@router.message(F.text == 'üóìÔ∏è–ü–æ–ª—É–≥–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç')
async def six_months_comparison_chart(message: Message, session: AsyncSession):
    user = await qr.orm_get_user_by_tg_id(session, message.from_user.id)
    await message.answer("üìä –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")

    # –ü–æ–ª—É—á–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –∫ –≤–∞–ª—é—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    raw_data = await qr.orm_get_income_expense_by_months(session, user.id, months=6)

    if not raw_data:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    currency_result = await session.execute(
        select(Currency.symbol, Currency.code)
        .join(Setting, Setting.currency_id == Currency.id)
        .where(Setting.user_id == user.id)
    )
    currency_row = currency_result.first()
    currency_symbol = currency_row[0] or currency_row[1] or "‚ÇΩ"

    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    summary = defaultdict(lambda: {"income": 0, "expense": 0})
    for month, is_expense, category, total in raw_data:
        type_key = "expense" if is_expense else "income"
        summary[month][type_key] += float(total)

    months = sorted(summary.keys())
    incomes = [summary[m]["income"] for m in months]
    expenses = [summary[m]["expense"] for m in months]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    x = range(len(months))
    bar_width = 0.35

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.bar(
        [i - bar_width / 2 for i in x],
        expenses,
        width=bar_width,
        label="–†–∞—Å—Ö–æ–¥—ã",
        color="salmon"
    )
    ax.bar(
        [i + bar_width / 2 for i in x],
        incomes,
        width=bar_width,
        label="–î–æ—Ö–æ–¥—ã",
        color="mediumseagreen"
    )

    ax.set_xticks(list(x))
    ax.set_xticklabels(months, rotation=45, ha='right')
    ax.set_ylabel(f"–°—É–º–º–∞ ({currency_symbol})")
    ax.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤")
    ax.legend()
    ax.grid(axis='y', linestyle='--', alpha=0.5)
    plt.tight_layout()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)

    photo = BufferedInputFile(buf.read(), filename="six_months_grouped_comparison_chart.png")
    await message.answer_photo(photo, caption="üìä –î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤")